1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Серверна частина проекту розроблена на платформі .NET 8 з використанням мови C#. API створено засобами фреймворку ASP.NET Core 8. СУБД для проекту обрано Microsoft SQL Server.
Для роботи з базою даних використано Entity Framework Core 8, а також використано підхід Code First, який дозволяє в коді створити сутності бази даних у вигляді класів та інших типів. Аутентифікацію та авторизацію на проекті реалізовано за допомогою вбудованих можливостей в ASP.NET Core, а саме бібліотеки ASP.NET Core Identity.
Ця бібліотека дозволяє швидко та гнучко налаштувати авторизацію, а також надає весь необхідний функціонал який підійде для більшості подібних систем. Механізми аутентифікації основані на токені доступу та токені оновлення, що знаходиться в HTTP-Only Cookie. 
Токен оновлення зберігається в базі даних використовується для оновлення токену доступу, який має невеликий період життя.
Серверна частина має монолітну багатошарову архітектуру, що складається з 3 шарів: рівень представлення даних, рівень бізнес-логіки та рівень доступу до даних.
Також окремо виділені збірки для проксі для зовнішніх сервісів, а також наявні окремі збірки для моделей та локалізації.


2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Наступною діаграмою є діаграма розгортання системи (рис. 2). Представлена вона двома основними компонентами: веб сервером та базою даних.
Система розгортається в докер-контейнерах. На даний момент контейнерів 2: для серверної частини і для бази даних PostgreSQL.
В майбутньому плануєтся розшиерння з додаванням контейнера з RabbitMQ для роботи з чергами повідомлень та відокремлення сервісу роботи з пристроями в окремий контейнер.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Далі пропоную ознайомитись з діаграмою пакетів (Package-Diagram), яка показує залежності різних шарів архітектури (рис. 4) та взаємодію компонентів.
Точкою запуску програми є файл Program.cs, в якому виконується конфігурація DI-контейнера та конвеєра обробки запиту. 
В даному проекту застосовується ін’єкція залежностей (Dependency Injection). Дана реалізація дозволяє розділити створення об'єктів і їхніх залежностей від їхнього використання.
Це полегшує зміну та підтримку коду, оскільки залежності можна легко замінювати або розширювати без великих змін в існуючому коді. Також Dependency Injection є одним з аспектів інверсії управління, який описано в принципах SOLID.
Він дозволяє контролювати, як об'єкти створюються та конфігуруються, перекладаючи ці обов'язки на контейнер інверсії управління.
В проекті використано комбінований контейнер інверсії залежностей AutoFac та Microsoft Dependency Injection. В проекті аутентифікацію та авторизацію реалізовано за допомогою вбудованої системи авторизації ASP.NET Core Identity.
Дана система надає гнучку і універсальну систему аутентифікації ї та авторизації за допомогою кукі та токена доступу. Також система має функціонал двух факторної авторизації. Для аутентифікації та авторизацї використовується 2 токени: токен доступу (Access Token) та токен оновлення (Refresh Token).
Це дозволяє виконувати безпечну авторизацію для веб сайтів та мобільних пристроїв. Оскільки токен доступу має відносно невеликий час життя, то в HTTP-Only Cookie покладено токен оновлення, який має довший життєвий цикл і використовується тоді, коли серверу необхідно виписати новий токен доступу.
Також на відміну від токена доступу, токен оновлення зберігається в базу даних. Даний механізм дозволяє виконувати безпечну і надійну авторизацію користувачів на різних пристроях та клієнтах.
В даному проекті для роботи з базою даних використано EF Core  який підтримує відкладене завантаження (lazy loading) як один із механізмів завантаження даних з бази даних. Lazy Loading - це техніка, при якій дані завантажуються з бази даних тільки в той момент, коли вони реально потрібні, тобто при першому зверненні до властивості, яка є навігаційною властивістю.
По замовчанню дана технологія вимкнена, тому, для того, аби її застосувати необхідно додати до проекту nuget пакет Microsoft.EntityFrameworkCore.Proxies. Наступним рішенням було використання шаблону репозиторій.
Реалізовано це було за допомогою GenericRepository (додаток В), який є шаблоном реалізації репозиторію в програмуванні, який дозволяє працювати з різними типами об'єктів (сутностей) за допомогою одного та того ж самого коду.
Використання GenericRepository дозволяє уникнути дублювання коду та спрощує управління даними в базі даних. Основні переваги використання GenericRepository включають зменшення повторення коду та полегшення тестування.
Також в проекті використовується шаблон UnitOfWork з імплементацію в однойменному класі (додаток Г). Даний шаблон використовується для керування транзакцією та забезпечення цілістності даних у системах баз даних. Цей шаблон забезпечує одиничну точку керування транзакцією для групи операцій з базою даних.
Дана програмна система також підтримує українську та англійську локалізації. Для додавання локалізації використано nuget пакет Microsoft.Extensions.Localization. Конфігурацію для підтримки локалізації виконано за допомогою метода розширення в файлі LocalizationConfigExtension.cs (додаток Ґ). Локалізацію виконано за допомогою файлів ресурсів (.resx).
Для універсальної обробки помилок у програмі використовується глобальний обробник винятків, це убезпечує систему від некоректних відповідей на запити в разі серверної помилки, а також дозволяє в одному місці конфігурувати поведінку не пишучи багато зайвого і повторюваного коду, конфігурацію можна побачити тут, а весь код знаходить в файлі GlobalExceptionHandler.cs (Додаток Д).

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Наступним кроком будо складено Use-Case діаграму (рис. 3) для відображення можливих сценаріїв дій для користувачів системи.
Передбачено, що система має 2 користувача: менеджер системи/співробітник готелю та адміністратора.
Також варто зазначити, що в середині системи у різних користувачів крім адміністратора може бути різний доступ до різних функцій.

5 ПОБУДОВА ER-ДІАГРАМИ

ER-модель даних проекту (рис. 1) містить 15 сутностей, серед яких: AspNetRoleClaims, AspNetRoles, AspNetUserClaims, AspNetUserLogins, AspNetUserRoles, AspNetUsers, AspNetUserTokens, Booking, Customer, Hotel, Photo, Room, RoomPlace, Staff, TodoTasks.

6 СПЕЦИФІКАЦІЯ REST 

Посилання 	Метод 	Опис 
/api/Account/ create-role POST	Створити роль
/api/Account/assign-role	POST	Назначити роль користувачу
api/Account/delete-role	POST	Видалити роль з БД
/api/Account/remove-role	POST	Видалити роль у користувача
/api/Account/logout	GET	Вихід з системи
/api/Account/update-profile	GET	Оновити інформацію про номер телефону та ім’я та прізвище користувача
/api/Account/confirmEmail?userId={userId}&code={code}&changedEmail={changedEmail}	GET	Підтвердити зміну пошту
/api/Account/forgotPassword	POST	Отримати лінк на оновлення пароля
/api/Account/login?useCookies={useCookies}&useSessionCookies={useSessionCookies}	POST	Увійти в свій обліковий запис
api/Account/manage/2fa	POST	Включити/пройти двофакторну аутентифікацію
/api/Account/manage/info	GET	Отримати інформацію 
/api/Account/manage/info	POST	Внести інформацію
/api/Account/refresh	POST	Отримати новий токен доступу по токену оновлення
/api/Account/register	POST	Зареєструватися
/api/Account/resendConfirmationEmail	POST	Надіслати лист на пошту з посиланням для підтвердження пошти
/api/Account/resetPassword	POST	Оновити пароль
/api/Booking/cancel/:id	DELETE	Скасувати бронювання
/api/Booking/checkin/:bookingId/code/:code	GET	Провести операцію реєстрації гостя
/api/Booking/checkout/:bookingId	GET	Провести операцію виїзду гостя з готелю
/api/Booking/create	POST	Забронювати кімнату в готелі
/api/Booking/filter?request= {request}	GET	Фільтрація бронювань
/api/Booking/update	PUT	Оновити інформацію по бронюванню
/api/Booking/:id	GET	Отримати інформацію по бронюванню
/api/DataAdministration/backup-db	POST	Створити бекап БД
/api/Hotel	GET	Отримати список готелів
/api/Hotel/create	POST	Створити готель
/api/Hotel/delete/:id	DELETE	Видалити готель
/api/Hotel/update/:id	PUT	Оновити інформацію про готель
/api/Hotel/:id	GET	Отримати інформацію про готель
/api/Room/create	POST	Створити кімнату
/api/Room/update	PUT	Оновити інформацію про кімнату
/api/Room/:id	GET	Отримати інформацію про кімнату
/api/Room/:id	DELETE	Видалити кімнату
/api/Room/:roomId/roomplace	GET	Отримати місця в кімнаті
/api/Room/:roomId/roomplace/add	POST	Додати місце в кімнату
/api/Room/:roomId/roomplace/remove/:roomPlaceId	DELETE	Видалити місце з кімнати
/api/Room/:roomId/roomplace/:roomPlaceI/update	PUT	Оновити інформацію про місце в кімнаті
/api/Room/:roomId/set-api-key	POST	Встановити апі-ключ для керування замком
/api/Staff/create	POST	Створити працівника готелю
/api/Staff/:oldStaffId/tasks/:todoTaskId/reassign/:newStaffId	PUT	Переназначити задачу на іншого працівника
/api/Staff/:staffId	GET	Отримати інформацію про про працівника
/api/Staff/:staffId/remove	DELETE	Видалити працівника
/api/Staff/:staffId/tasks	GET	Отримати список задач для працівника
/api/Staff/:staffId/tasks/add	POST	Додати задачу для працівника
/api/Staff/:staffId/tasks/:todoTaskId/finish?isCompleted={isCompleted}	PUT	Завершити задачу, як виконану або невиконану
/api/Staff/:staffId/tasks/:todoTaskId/remove	DELETE	Видалити задачу
/api/Staff/:staffId/tasks/:todoTaskId/update	PUT	Оновити задачу
/api/Staff/:staffId/update	PUT	Оновити інформацію по працівнику
/api/Stats/occupancy-report
/:hotelId	POST	Отримати помісячний звіт про наповненість та дохідність



7 ПОБУДОВА ДІАГРАМИ ПАКЕТІВ

Далі пропоную ознайомитись з діаграмою пакетів (Package-Diagram), яка показує залежності різних шарів архітектури (рис. 4) та взаємодію компонентів.
На діаграмі зображено 6 компонентів: збірка з конгтроллерами, збарка з бізнес логікою, збірка для доступу до БД, збірка для берігання сутностей та інших моделей, збірка для локалізації та збірка для проксі сервісу для доступу до замків дверей.

ВИСНОВКИ

Під час виконання лабораторної роботи я набув навичок із розробки серверної частини програми для програмної система для керування роботою готелю.